Lab 3 – Object-Oriented Programming (Classes, Constructors, Methods)
Task 2

In this lab, you are required to design and implement a simple Library Management System using the concepts of object-oriented programming. You will create three classes, Book, Date, and Person, along with a LibraryTest class to test your implementation.

The Book class will represent the details of a book available in the library. It should have the following attributes: bookId, title, author (of type Person), publicationDate (of type Date), and genre. The bookId must begin with the prefix "LB25-BK-" and should include an auto-generated numeric part starting from "101" for the first book and increasing sequentially for each new object created. You are required to implement four constructors in this class: a default constructor, a parameterized constructor with all attributes, a constructor without the bookId (where the ID is auto-generated), and a copy constructor. The copy constructor is especially important here because the Book class now contains two object references: author and publicationDate. A shallow copy would simply copy references, causing multiple Book objects to unintentionally share the same Person or Date instance. Instead, you should implement a deep copy, where the copy constructor of Book internally calls the copy constructors of Person and Date. This ensures that each Book object has its own independent copies of the associated Person and Date. In addition, the class must include getter and setter methods for all attributes, an equals method to compare two Book objects (two books are considered equal if they share the same title, the same author’s name, and the same publication year), and a toString method that uses String.format to return the book details in a neatly formatted way.

The Person class will represent the author of a book. It should include the attributes name, gender, and address. You must provide a parameterized constructor, getter and setter methods for each attribute, and override the toString method to return the author’s details in a readable format. Additionally, a copy constructor should be implemented in this class to support deep copying when a Book object is cloned. The equals method in Person should check whether two authors have the same name and gender.

The Date class will represent the publication date of a book. It should include three attributes: day, month, and year. This class should provide a three-parameter constructor to initialize the date, along with getter and setter methods for each attribute. The Date class must override the toString method to return a formatted string representation of the date, such as "15-March-2021". It should also implement an equals method to compare two date objects. To make the lab more challenging, the Date class should also provide an additional method isBefore(Date otherDate), which determines whether one date precedes another. This will allow you to compare publication dates of books and determine which book was published earlier.

Finally, you will create a LibraryTest class that contains the main method. In this class, you will create at least four Book objects using different constructors. The details of these books should be printed on the console using the toString method. You will also select any two Book objects and check them for equality using the equals method, displaying the result of the comparison. Furthermore, you should demonstrate the isBefore method of the Date class by comparing the publication dates of at least two books and printing which one was published earlier.

Your submission must include the complete source code of the Book, Person, Date, and LibraryTest classes, along with proper comments in the code. The output should demonstrate the formatted book details, the result of the equality check, and the result of comparing two publication dates. This lab is designed to help you strengthen your understanding of constructors, encapsulation, deep versus shallow copying, object composition, object comparison, and output formatting in object-oriented programming.